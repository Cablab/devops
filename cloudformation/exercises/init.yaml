Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t2.micro 
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  NameOfService:
    Type: String
    Description: The name of the service this stack is to be used for
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName 
    Description: Name of EC2 login key

Mappings: 
  RegionMap:
    us-east-1: 
      "HVM64": "ami-0ff8a91507f77f867"
    us-west-1: 
      "HVM64": "ami-0bdb828fd58c52235"
    eu-west-1: 
      "HVM64": "ami-047bb4163c506cd98"
    ap-southeast-1: 
      "HVM64": "ami-08569b978cc4dfa10"
    ap-northeast-1: 
      "HVM64": "ami-06cd52961ce9f0d85"

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Metadata:
      # AWS::CloudFormation::Init allows you to specify a lot of different
      # things that can provision the resource once it comes up
      AWS::CloudFormation::Init:
        config: # start a configuration set. You can have multiple
          packages: # packages to install on the host
            yum:
              php: [] # specify options in [] or leave blank for default
              httpd: []
              wget: []
              unzip: []
              git: []
          # groups: # user groups to create on the host
          # users: # users to create on the host
          files: # files to copy onto the host
            /var/www/html/hello.html: # file that should exist on host
              content: !Sub | # content of the file
                <!DOCTYPE html>
                <html>
                <body>
                <h1>Welcome to CloudFormation.</h1>
                <p>This site is deployed by CloudFormation.</p>
                </body>
                </html>
          commands: # shell commands to run on the host
            test:
              command: "wget https://www.tooplate.com/zip-templates/2119_gymso_fitness.zip && unzip 2119_gymso_fitness.zip && cp -r 2119_gymso_fitness/* /var/www/html/"
          services: # manage services on the host
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: !Ref InstanceTypeParameter # Referencing Parameter above
      KeyName: !Ref KeyName # Referencing Parameter above
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - HVM64
      Tags:
      - Key: "Name"
        Value: !Ref NameOfService
      SecurityGroups:
      - !Ref VprofileSG
      UserData: # UserData allows us to reference and use the Init Metadata above
        'Fn::Base64': # Intrinsic function to convert contents to Base64
          !Sub | # Pass the following as input 
            #!/bin/bash -xe
            # Ensure AWS CFN Boostrap is latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyInstance --region ${AWS::Region}
            # Send exit code to Stack
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::Stackname} --resource MyInstance --region ${AWS::Region}

  VprofileSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh & http from MyIP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <my-IP-address>

Outputs:
  PrintSomeInfo:
    Value: !GetAtt MyInstance.PublicDnsName
